"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvolutionApi = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const properties_1 = require("./properties");
const execute_1 = require("./execute");
class EvolutionApi {
    constructor() {
        this.description = {
            displayName: 'Evolution API',
            name: 'evolutionApi',
            icon: 'file:evolutionapi.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"]}}',
            description: 'Interact with Evolution API',
            defaults: {
                name: 'Evolution API',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'evolutionApi',
                    required: true,
                },
            ],
            requestDefaults: {
                baseURL: 'https://doc.evolution-api.com/api-reference',
                url: '',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
            },
            properties: properties_1.evolutionNodeProperties,
        };
    }
    async execute() {
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        const fn = execute_1.resourceOperationsFunctions[resource][operation];
        if (!fn) {
            throw new n8n_workflow_1.NodeApiError(this.getNode(), {
                message: 'Operação não suportada.',
                description: `A função "${operation}" para o recurso "${resource}" não é suportada!`,
            });
        }
        const responseData = await fn(this);
        return [this.helpers.returnJsonArray(responseData)];
    }
}
exports.EvolutionApi = EvolutionApi;
//# sourceMappingURL=EvolutionApi.node.js.map