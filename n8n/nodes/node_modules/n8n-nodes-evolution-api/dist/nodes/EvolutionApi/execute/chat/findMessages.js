"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMessages = findMessages;
const n8n_workflow_1 = require("n8n-workflow");
const evolutionRequest_1 = require("../evolutionRequest");
async function findMessages(ef) {
    try {
        const instanceName = ef.getNodeParameter('instanceName', 0);
        const remoteJid = ef.getNodeParameter('remoteJid', 0);
        const page = ef.getNodeParameter('page', 0, 1);
        const offset = ef.getNodeParameter('offset', 0, 10);
        const body = {
            where: {
                key: {
                    remoteJid: remoteJid.includes('@') ? remoteJid : `${remoteJid}@s.whatsapp.net`,
                },
            },
            page,
            offset,
        };
        const requestOptions = {
            method: 'POST',
            uri: `/chat/findMessages/${instanceName}`,
            body,
            json: true,
        };
        const response = await (0, evolutionRequest_1.evolutionRequest)(ef, requestOptions);
        return {
            json: {
                success: true,
                data: response,
            },
        };
    }
    catch (error) {
        const errorData = {
            success: false,
            error: {
                message: error.message,
                details: 'Erro ao buscar mensagens',
                code: error.code || 'UNKNOWN_ERROR',
                timestamp: new Date().toISOString(),
            },
        };
        if (!ef.continueOnFail()) {
            throw new n8n_workflow_1.NodeOperationError(ef.getNode(), error.message, {
                message: errorData.error.message,
                description: errorData.error.details,
            });
        }
        return {
            json: errorData,
            error: errorData,
        };
    }
}
//# sourceMappingURL=findMessages.js.map