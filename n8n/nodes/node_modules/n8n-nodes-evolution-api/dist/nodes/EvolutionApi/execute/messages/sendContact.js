"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendContact = sendContact;
const n8n_workflow_1 = require("n8n-workflow");
const evolutionRequest_1 = require("../evolutionRequest");
async function sendContact(ef) {
    try {
        const instanceName = ef.getNodeParameter('instanceName', 0);
        const remoteJid = ef.getNodeParameter('remoteJid', 0);
        const contacts = ef.getNodeParameter('contacts.contactValues', 0);
        if (!Array.isArray(contacts) || contacts.length === 0) {
            const errorData = {
                success: false,
                error: {
                    message: 'Lista de contatos inválida',
                    details: 'É necessário fornecer pelo menos um contato',
                    code: 'INVALID_CONTACTS',
                    timestamp: new Date().toISOString(),
                },
            };
            return {
                json: errorData,
                error: errorData,
            };
        }
        const body = {
            number: remoteJid,
            contact: contacts.map(contact => ({
                fullName: contact.fullName,
                wuid: contact.wuid,
                phoneNumber: contact.phoneNumber,
                ...(contact.organization && { organization: contact.organization }),
                ...(contact.email && { email: contact.email }),
                ...(contact.url && { url: contact.url }),
            })),
        };
        const requestOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            uri: `/message/sendContact/${instanceName}`,
            body,
            json: true,
        };
        const response = await (0, evolutionRequest_1.evolutionRequest)(ef, requestOptions);
        return {
            json: {
                success: true,
                data: response,
            },
        };
    }
    catch (error) {
        const errorData = {
            success: false,
            error: {
                message: error.message.includes('Could not get parameter')
                    ? 'Parâmetros inválidos ou ausentes'
                    : 'Erro ao enviar contato',
                details: error.message.includes('Could not get parameter')
                    ? 'Verifique se todos os campos obrigatórios foram preenchidos corretamente'
                    : error.message,
                code: error.code || 'UNKNOWN_ERROR',
                timestamp: new Date().toISOString(),
            },
        };
        if (!ef.continueOnFail()) {
            throw new n8n_workflow_1.NodeOperationError(ef.getNode(), error.message, {
                message: errorData.error.message,
                description: errorData.error.details,
            });
        }
        return {
            json: errorData,
            error: errorData,
        };
    }
}
//# sourceMappingURL=sendContact.js.map