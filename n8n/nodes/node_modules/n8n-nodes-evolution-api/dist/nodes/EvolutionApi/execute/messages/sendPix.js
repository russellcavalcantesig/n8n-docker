"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendPix = sendPix;
const n8n_workflow_1 = require("n8n-workflow");
const evolutionRequest_1 = require("../evolutionRequest");
async function sendPix(ef) {
    try {
        const instanceName = ef.getNodeParameter('instanceName', 0);
        const remoteJid = ef.getNodeParameter('remoteJid', 0);
        const name = ef.getNodeParameter('name', 0);
        const keyType = ef.getNodeParameter('keyType', 0);
        const key = ef.getNodeParameter('key', 0);
        const validKeyTypes = ['cpf', 'cnpj', 'email', 'phone', 'random'];
        if (!validKeyTypes.includes(keyType)) {
            const errorData = {
                success: false,
                error: {
                    message: 'Tipo de chave PIX inválida',
                    details: 'O tipo de chave PIX deve ser: cpf, cnpj, email, phone ou random',
                    code: 'INVALID_PIX_KEY_TYPE',
                    timestamp: new Date().toISOString(),
                },
            };
            return {
                json: errorData,
                error: errorData,
            };
        }
        const body = {
            number: remoteJid,
            buttons: [
                {
                    type: 'pix',
                    currency: 'BRL',
                    name,
                    keyType,
                    key,
                },
            ],
        };
        const requestOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            uri: `/message/sendButtons/${instanceName}`,
            body,
            json: true,
        };
        const response = await (0, evolutionRequest_1.evolutionRequest)(ef, requestOptions);
        return {
            json: {
                success: true,
                data: response,
            },
        };
    }
    catch (error) {
        const errorData = {
            success: false,
            error: {
                message: error.message.includes('Could not get parameter')
                    ? 'Parâmetros inválidos ou ausentes'
                    : 'Erro ao enviar botão PIX',
                details: error.message.includes('Could not get parameter')
                    ? 'Verifique se todos os campos obrigatórios foram preenchidos corretamente'
                    : error.message,
                code: error.code || 'UNKNOWN_ERROR',
                timestamp: new Date().toISOString(),
            },
        };
        if (!ef.continueOnFail()) {
            throw new n8n_workflow_1.NodeOperationError(ef.getNode(), error.message, {
                message: errorData.error.message,
                description: errorData.error.details,
            });
        }
        return {
            json: errorData,
            error: errorData,
        };
    }
}
//# sourceMappingURL=sendPix.js.map