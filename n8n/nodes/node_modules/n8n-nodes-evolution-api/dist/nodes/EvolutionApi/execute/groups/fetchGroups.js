"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchGroups = fetchGroups;
const n8n_workflow_1 = require("n8n-workflow");
const evolutionRequest_1 = require("../evolutionRequest");
async function fetchGroups(ef) {
    try {
        const instanceName = ef.getNodeParameter('instanceName', 0);
        const searchMethod = ef.getNodeParameter('searchMethod', 0);
        let requestOptions;
        switch (searchMethod) {
            case 'inviteCode':
                const inviteCode = ef.getNodeParameter('inviteCode', 0);
                requestOptions = {
                    method: 'GET',
                    uri: `/group/inviteInfo/${instanceName}?inviteCode=${inviteCode}`,
                    json: true,
                };
                break;
            case 'groupJid':
                const groupJid = ef.getNodeParameter('groupJid', 0);
                requestOptions = {
                    method: 'GET',
                    uri: `/group/findGroupInfos/${instanceName}?groupJid=${groupJid}`,
                    json: true,
                };
                break;
            case 'fetchAll':
                const getParticipants = ef.getNodeParameter('getParticipants', 0);
                requestOptions = {
                    method: 'GET',
                    uri: `/group/fetchAllGroups/${instanceName}?getParticipants=${getParticipants}`,
                    json: true,
                };
                break;
            default:
                throw new Error('Método de busca inválido');
        }
        const response = await (0, evolutionRequest_1.evolutionRequest)(ef, requestOptions);
        return {
            json: {
                success: true,
                data: response,
            },
        };
    }
    catch (error) {
        const errorData = {
            success: false,
            error: {
                message: error.message,
                details: 'Erro ao buscar informações do(s) grupo(s)',
                code: error.code || 'UNKNOWN_ERROR',
                timestamp: new Date().toISOString(),
            },
        };
        if (!ef.continueOnFail()) {
            throw new n8n_workflow_1.NodeOperationError(ef.getNode(), error.message, {
                message: errorData.error.message,
                description: errorData.error.details,
            });
        }
        return {
            json: errorData,
            error: errorData,
        };
    }
}
//# sourceMappingURL=fetchGroups.js.map